{"version":3,"sources":["TodoItem/TodoItem.tsx","TodoList/TodoList.tsx","api/api.tsx","App.tsx","index.tsx"],"names":["TodoItem","todo","title","user","name","completed","TodoList","todos","style","listStyle","map","key","id","border","getData","url","fetch","then","response","json","App","useState","setTodos","filteredTodos","setFilteredTodos","isLoading","setLoading","loadTodos","a","Promise","all","todosFromServer","users","preparedTodos","find","person","userId","filterTodo","typeOfFilter","sort","b","localeCompare","toString","length","type","onClick","disabled","ReactDOM","render","document","getElementById"],"mappings":"wOAOaA,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAH,OACjC,oCACE,4CAAcA,EAAKC,QACnB,2CAAaD,EAAKE,KAAKC,OACvB,gDAAkBH,EAAKI,UAAY,IAAM,QCHhCC,EAAsB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OACjC,wBAAIC,MAAO,CAAEC,UAAW,SACrBF,EAAMG,KAAI,SAAAT,GAAI,OACb,wBAAIU,IAAKV,EAAKW,GAAIJ,MAAO,CAAEK,OAAQ,oBACjC,kBAAC,EAAD,CAAUZ,KAAMA,UCPxB,SAASa,EAAWC,GAClB,OAAOC,MAAMD,GACVE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAGxB,IC6EQC,EAlFC,WAAO,IAAD,EACMC,mBAAsB,IAD5B,mBACbd,EADa,KACNe,EADM,OAEsBD,mBAAQ,YAAkBd,IAFhD,mBAEbgB,EAFa,KAEEC,EAFF,OAGYH,oBAAS,GAHrB,mBAGbI,EAHa,KAGFC,EAHE,KAKdC,EAAS,uCAAG,oCAAAC,EAAA,6DAChBF,GAAW,GADK,SAGuBG,QAAQC,IAAI,CDFzBhB,EARZ,8CAOYA,EARZ,gDCQE,mCAGTiB,EAHS,KAGQC,EAHR,KAKVC,EAAgBF,EAAgBrB,KAAI,SAACT,GACzC,IAAME,EAAO6B,EAAME,MAAK,SAACC,GAAD,OAAuBA,EAAOvB,KAAOX,EAAKmC,UAElE,OAAO,eACFnC,EADL,CAEEE,YAIJmB,EAASW,GACTP,GAAW,GACXF,EAAiBS,GAhBD,4CAAH,qDAmBTI,EAAa,SAACC,GAClB,OAAQA,GACN,IAAK,UACHd,EAAiB,YAAIjB,GAClBgC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAE1B,MAAMuC,cAAcD,EAAEtC,WAC1C,MACF,IAAK,SACHsB,EAAiB,YAAIjB,GAClBgC,MAAK,SAACX,EAAGY,GAAJ,OAAUZ,EAAEzB,KAAKC,KAAKqC,cAAcD,EAAErC,KAAKC,UACnD,MACF,IAAK,cACHoB,EAAiB,YAAIjB,GAClBgC,MAAK,SAACX,EAAGY,GAAJ,OAAUA,EAAEnC,UAAUqC,WACzBD,cAAcb,EAAEvB,UAAUqC,kBAMrC,OACE,6BACE,qDACA,6BACInC,EAAMoC,OAOJ,oCACE,4BACEC,KAAK,SACLC,QAAS,kBAAMR,EAAW,aAF5B,iBAMA,4BACEO,KAAK,SACLC,QAAS,kBAAMR,EAAW,YAF5B,gBAMA,4BACEO,KAAK,SACLC,QAAS,kBAAMR,EAAW,iBAF5B,sBAlBF,4BAAQO,KAAK,SAASC,QAASlB,EAAWmB,SAAUrB,GACjDA,EAAY,aAAe,kBA2BpC,kBAAC,EAAD,CAAUlB,MAAOgB,MC9EvBwB,IAASC,OACP,kBAAC,EAAD,MACAC,SAASC,eAAe,U","file":"static/js/main.483a9286.chunk.js","sourcesContent":["import React, { FC } from 'react';\nimport { UsersTodo } from '../types';\n\ninterface Props {\n  todo: UsersTodo;\n}\n\nexport const TodoItem: FC<Props> = ({ todo }) => (\n  <>\n    <p>{`Title: ${todo.title}`}</p>\n    <p>{`User: ${todo.user.name}`}</p>\n    <p>{`Completed: ${todo.completed ? '+' : '-'}`}</p>\n  </>\n);\n","import React, { FC } from 'react';\nimport { TodoItem } from '../TodoItem/TodoItem';\nimport { UsersTodo } from '../types';\n\ninterface Props {\n  todos: UsersTodo[];\n}\n\nexport const TodoList: FC<Props> = ({ todos }) => (\n  <ul style={{ listStyle: 'none' }}>\n    {todos.map(todo => (\n      <li key={todo.id} style={{ border: '1px solid black' }}>\n        <TodoItem todo={todo} />\n      </li>\n    ))}\n  </ul>\n);\n","import { TodoProps, UserProps } from '../types';\n\nconst USERS_API = 'https://jsonplaceholder.typicode.com/users';\nconst TODOS_API = 'https://jsonplaceholder.typicode.com/todos';\n\nfunction getData<T>(url: string): Promise<T> {\n  return fetch(url)\n    .then(response => response.json());\n}\n\nexport const getUsers = () => getData<UserProps[]>(USERS_API);\nexport const getTodos = () => getData<TodoProps[]>(TODOS_API);\n","import React, { FC, useState } from 'react';\nimport { TodoList } from './TodoList/TodoList';\nimport { TodoProps, UserProps, UsersTodo } from './types';\nimport { getUsers, getTodos } from './api/api';\n\nconst App: FC = () => {\n  const [todos, setTodos] = useState<UsersTodo[]>([]);\n  const [filteredTodos, setFilteredTodos] = useState<UsersTodo[]>([...todos]);\n  const [isLoading, setLoading] = useState(false);\n\n  const loadTodos = async () => {\n    setLoading(true);\n\n    const [todosFromServer, users] = await Promise.all([getTodos(), getUsers()]);\n\n    const preparedTodos = todosFromServer.map((todo: TodoProps) => {\n      const user = users.find((person: UserProps) => person.id === todo.userId) as UserProps;\n\n      return {\n        ...todo,\n        user,\n      };\n    });\n\n    setTodos(preparedTodos);\n    setLoading(false);\n    setFilteredTodos(preparedTodos);\n  };\n\n  const filterTodo = (typeOfFilter: string) => {\n    switch (typeOfFilter) {\n      case 'byTitle':\n        setFilteredTodos([...todos]\n          .sort((a, b) => a.title.localeCompare(b.title)));\n        break;\n      case 'byName':\n        setFilteredTodos([...todos]\n          .sort((a, b) => a.user.name.localeCompare(b.user.name)));\n        break;\n      case 'byCompleted':\n        setFilteredTodos([...todos]\n          .sort((a, b) => b.completed.toString()\n            .localeCompare(a.completed.toString())));\n        break;\n      default:\n    }\n  };\n\n  return (\n    <div>\n      <h1>Dynamic list of todos</h1>\n      <div>\n        {!todos.length\n          ? (\n            <button type=\"button\" onClick={loadTodos} disabled={isLoading}>\n              {isLoading ? 'Loading...' : 'Press to LOAD'}\n            </button>\n          )\n          : (\n            <>\n              <button\n                type=\"button\"\n                onClick={() => filterTodo('byTitle')}\n              >\n                Sort by Title\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => filterTodo('byName')}\n              >\n                Sort by User\n              </button>\n              <button\n                type=\"button\"\n                onClick={() => filterTodo('byCompleted')}\n              >\n                Sort by Completed\n              </button>\n            </>\n          )}\n\n      </div>\n      <TodoList todos={filteredTodos} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}